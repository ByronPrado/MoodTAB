@model WebConTablas.ViewModels.PacienteDetalleViewModel
@using System.Text.Json
@using WebConTablas.Helpers

@{
    // Ya tienes los cálculos precargados en el ViewModel desde el controlador,
    // así que aquí sólo usa las propiedades de Model.

    // Para gráficas y demás, usaremos Model.DiariosRecientes, Model.EmocionesSet, etc.
    var emocionConteo = Model.ConteoEmociones;
    var maxConteo = emocionConteo.Any() ? emocionConteo.Values.Max() : 1; // evitar división por cero
}

<div id="reporte-contenido">
    <h2>Detalles de: @Model.Nombre</h2>
    <hr />

    <div>
        <h4>Información General</h4>
        <dl class="row">
            <dt class="col-sm-2">ID</dt><dd class="col-sm-10">@Model.ID_Paciente</dd>
            <dt class="col-sm-2">Diagnóstico</dt><dd class="col-sm-10">@Model.Diagnostico</dd>
            <dt class="col-sm-2">Edad</dt><dd class="col-sm-10">@Model.Edad</dd>
            <dt class="col-sm-2">Sexo</dt><dd class="col-sm-10">@Model.Sexo</dd>
            <dt class="col-sm-2">Email</dt><dd class="col-sm-10">@Model.Email</dd>
            <dt class="col-sm-2">Teléfono</dt><dd class="col-sm-10">@Model.Telefono</dd>
        </dl>
    </div>

    <div class="mt-4">
        <h4>Diarios Emocionales</h4>

        <!-- FILA 1 -->
        <div class="row">
            @if (Model.DiariosRecientes != null && Model.DiariosRecientes.Any(d => d.Pasos.HasValue))
            {
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Gráfico de Pasos (Últimos 7 días)</h5>
                            <canvas id="pasosChart" width="400" height="230"></canvas>
                        </div>
                    </div>
                </div>
            }

            @if (Model.DiariosRecientes != null && Model.DiariosRecientes.Any(d => d.Horas_celular.HasValue))
            {
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Gráfico de Horas de Celular (Últimos 7 días)</h5>
                            <canvas id="celularChart" width="400" height="230"></canvas>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- FILA 2 -->
        <div class="row">
            @if (Model.DiariosRecientes != null && Model.DiariosRecientes.Any(d => d.Horas_redes.HasValue))
            {
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Gráfico de Horas en Redes Sociales (Últimos 7 días)</h5>
                            <canvas id="redesChart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>
            }

            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Promedio de Pasos según Estado</h5>
                        <canvas id="pasosPorEstadoChart" width="400" height="200"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- FILA 3 -->
        <div class="row">
            @if (emocionConteo.Any())
            {
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Tendencia de Emociones (Últimos 14 días)</h5>
                            <div>
                                @foreach (var item in emocionConteo.OrderByDescending(e => e.Value))
                                {
                                    var porcentaje = (double)item.Value / maxConteo * 100;
                                    <div style="margin-bottom: 10px;">
                                        <strong>@item.Key</strong>
                                        <div class="barra-emocion" style="background-color:#ddd; height:10px; width:100%;">
                                            <div class="barra-emocion-fill" style="width: @porcentaje%; background-color:#007bff; height:100%;"></div>
                                        </div>
                                        <small>@item.Value veces</small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (Model.DiariosRecientes != null && Model.DiariosRecientes.Any())
            {
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Distribución de Estados (Últimos 7 días)</h5>
                            <canvas id="estadosChart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>
            }
        </div>

    <div class="mt-4">
        <h4>Detalle de Diarios Emocionales</h4>
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Fecha</th>
                    <th>Emociones</th>
                    <th>Descripción</th>
                    <th>Pasos</th>
                    <th>Horas Celular</th>
                    <th>Horas Redes Sociales</th>
                    <th>Hora Dormida</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var diario in Model.DiariosRecientes.OrderByDescending(d => d.Fecha))
                {
                    <tr>
                        <td>@diario.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>
                            @{
                                if (!string.IsNullOrEmpty(diario.Emociones))
                                {
                                    var emos = JsonSerializer.Deserialize<Dictionary<string,int>>(diario.Emociones);
                                    if (emos != null)
                                    {
                                        foreach (var e in emos.Keys)
                                        {
                                            <span class="badge bg-primary me-1">@e</span>
                                        }
                                    }
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            }
                        </td>
                        
                        <td>@diario.Descripcion</td>
                        <td>@(diario.Pasos.HasValue ? diario.Pasos.Value.ToString() : "-")</td>
                        <td>@(diario.Horas_celular.HasValue ? diario.Horas_celular.Value.ToString("F2") : "-")</td>
                        <td>@(diario.Horas_redes.HasValue ? diario.Horas_redes.Value.ToString("F2") : "-")</td>
                        <td>@(string.IsNullOrEmpty(diario.Hora_dormida) ? "-" : diario.Hora_dormida)</td>

                        <td>
                            @{
                                var estado = diario.Estado ?? "-";
                                string claseEstado = "badge ";

                                if (estado.ToLower() == "inhibido")
                                {
                                    claseEstado += "bg-danger";
                                }
                                else if (estado.ToLower() == "exaltado")
                                {
                                    claseEstado += "bg-success";
                                }
                                else
                                {
                                    claseEstado += "bg-secondary";
                                }
                            }
                            <span class="@claseEstado">@estado</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="~/js/graficosPaciente.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var fechaLimite = new Date();
            fechaLimite.setDate(fechaLimite.getDate() - 7);

            const diariosEmocionales = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.DiariosRecientes, new System.Text.Json.JsonSerializerOptions { PropertyNamingPolicy = null }));


            function filtrarDatos(fechaLimite, campo) {
                const datosFiltrados = diariosEmocionales
                    .filter(d => d[campo] != null && new Date(d.Fecha) >= fechaLimite)
                    .sort((a, b) => new Date(a.Fecha) - new Date(b.Fecha));
                return {
                    labels: datosFiltrados.map(d => new Date(d.Fecha).toLocaleDateString('es-CL', { day: '2-digit', month: '2-digit' })),
                    data: datosFiltrados.map(d => d[campo])
                };
            }

            const pasosData = filtrarDatos(fechaLimite, 'Pasos');
            const celularData = filtrarDatos(fechaLimite, 'Horas_celular');
            const redesData = filtrarDatos(fechaLimite, 'Horas_redes');

            const totalDiarios = diariosEmocionales.length;
            const countEstado = estado => diariosEmocionales.filter(d => d.Estado?.toLowerCase() === estado).length;
            const dataEstados = [
                (countEstado('inhibido') / totalDiarios) * 100,
                (countEstado('exaltado') / totalDiarios) * 100,
                100 - ((countEstado('inhibido') + countEstado('exaltado')) / totalDiarios) * 100
            ];
            const labelsEstados = ["Inhibido", "Exaltado", "Otro"];

            const promedioPasosPorEstado = {
                labels: ['Inhibido', 'Exaltado'],
                data: [@Model.MediaPasosInhibido.ToString("F2").Replace(',', '.'), @Model.MediaPasosExaltado.ToString("F2").Replace(',', '.')]
            };

            const emocionesKeys = @Html.Raw(Json.Serialize(Model.EmocionesSet.ToList()));
            const emocionesData = {};
            @foreach (var emocion in Model.EmocionesSuavizadas.Keys)
            {
                <text>
                    emocionesData["@emocion"] = @Html.Raw(Json.Serialize(Model.EmocionesSuavizadas[emocion]));
                </text>
            }
            const fechasTendencia = @Html.Raw(Json.Serialize(Model.FechasTendencia));

            if (document.getElementById('pasosChart')) {
                graficosPaciente.crearYGuardar('pasosChart', crearGraficoPasos, 'pasosChart', pasosData.labels, pasosData.data);
            }
            if (document.getElementById('celularChart')) {
                graficosPaciente.crearYGuardar('celularChart', crearGraficoCelular, 'celularChart', celularData.labels, celularData.data);
            }
            if (document.getElementById('redesChart')) {
                graficosPaciente.crearYGuardar('redesChart', crearGraficoRedes, 'redesChart', redesData.labels, redesData.data);
            }
            if (document.getElementById('estadosChart')) {
                graficosPaciente.crearYGuardar('estadosChart', crearGraficoEstados, 'estadosChart', labelsEstados, dataEstados);
            }
            if (document.getElementById('pasosPorEstadoChart')) {
                graficosPaciente.crearYGuardar('pasosPorEstadoChart', crearGraficoPromedioPasos, 'pasosPorEstadoChart', promedioPasosPorEstado.labels, promedioPasosPorEstado.data);
            }
            if (document.getElementById('tendenciaEmocionesChart')) {
                graficosPaciente.crearYGuardar('tendenciaEmocionesChart', crearGraficoTendenciaEmociones, 'tendenciaEmocionesChart', fechasTendencia, emocionesKeys, emocionesData);
            }

            const btnExport = document.getElementById('exportarPdfBtn');
            if (btnExport) {
                btnExport.addEventListener('click', function () {
                    graficosPaciente.exportarPDF();
                });
            }
        });
    </script>
}
